<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Aegis</name>
    </assembly>
    <members>
        <member name="M:Aegis.Configuration.CustomData.GetValue(System.String)">
            <summary>
            지정된 Path에서 값을 가져옵니다.
            지정한 Path가 XmlAttribute가 아닌 경우, null을 반환할 수 있습니다.
            </summary>
            <param name="path">구분자는 \ 혹은 / 를 사용할 수 있습니다.</param>
            <returns>지정된 Path에 정의된 값</returns>
        </member>
        <member name="M:Aegis.Configuration.CustomData.GetValue(System.String,System.String)">
            <summary>
            지정된 Path에서 값을 가져옵니다.
            지정한 Path가 XmlAttribute가 아닌 경우, null을 반환할 수 있습니다.
            </summary>
            <param name="path">구분자는 \ 혹은 / 를 사용할 수 있습니다.</param>
            <param name="defaultValue">path에서 값을 가져올 수 없으면 default값을 반환합니다.</param>
            <returns>path에 값이 정의되어있으면 해당 값을 반환하고 path가 잘못되어있으면 defaultValue를 반환합니다.</returns>
        </member>
        <member name="M:Aegis.Starter.Initialize(System.Int32,System.Int32)">
            <summary>
            AegisNetwork 모듈을 초기화합니다.
            workerThreadCount와 dispatchThreadCount의 의미는 다음과 같습니다.
            -1 : 해당 작업을 AegisTask에서 실행됩니다.
            0 : 해당 작업을 호출하는 쓰레드에서 실행됩니다.
            >0 : 정해진 ThreadPool에서 해당 작업이 실행됩니다.
            </summary>
            <param name="workerThreadCount">백그라운드에서 작업을 처리할 Thread 개수</param>
            <param name="dispatchThreadCount">작업결과를 전달할 Thread 개수</param>
        </member>
        <member name="M:Aegis.Starter.Initialize(System.String,System.Int32,System.Int32)">
            <summary>
            구성정보 파일(XML)을 사용하여 AegisNetwork 모듈을 초기화합니다.
            workerThreadCount와 dispatchThreadCount의 의미는 다음과 같습니다.
            -1 : 해당 작업을 AegisTask에서 실행됩니다.
            0 : 해당 작업을 호출하는 쓰레드에서 실행됩니다.
            >0 : 정해진 ThreadPool에서 해당 작업이 실행됩니다.
            </summary>
            <param name="configFilename">XML 파일명</param>
            <param name="workerThreadCount">백그라운드에서 작업을 처리할 Thread 개수</param>
            <param name="dispatchThreadCount">작업결과를 전달할 Thread 개수</param>
        </member>
        <member name="M:Aegis.Starter.Release">
            <summary>
            사용중인 모든 리소스를 반환하고, AegisNetwork을 종료합니다.
            </summary>
        </member>
        <member name="M:Aegis.Starter.StartNetwork">
            <summary>
            NetworkChannel을 생성하고 네트워킹을 시작합니다.
            </summary>
        </member>
        <member name="M:Aegis.Starter.CreateNetworkChannel(System.String)">
            <summary>
            새로운 NetworkChannel을 생성합니다.
            이 Method는 NetworkChannel.CreateChannel와 동일합니다.
            </summary>
            <param name="channelName">생성할 NetworkChannel의 고유이름</param>
            <returns>생성된 NetworkChannel 객체</returns>
        </member>
        <member name="M:Aegis.Starter.StartNetwork(System.String)">
            <summary>
            지정된 NetworkChannel만을 생성하고 네트워킹을 시작합니다.
            </summary>
            <param name="networkChannelName">시작할 NetworkChannel 이름</param>
            <returns>해당 NetworkChannel 객체</returns>
        </member>
        <member name="M:Aegis.Starter.StartNetwork(System.String,Aegis.SessionGenerateDelegator)">
            <summary>
            지정된 NetworkChannel만을 생성하고 네트워킹을 시작합니다.
            sessionGenerator가 지정되기 때문에 config file에 정의된 sessionClass, receiveBufferSize는 무시됩니다.
            </summary>
            <param name="networkChannelName">시작할 NetworkChannel 이름</param>
            <param name="sessionGenerator">Session 객체를 생성하는 Delegator</param>
            <returns>해당 NetworkChannel 객체</returns>
        </member>
        <member name="M:Aegis.Starter.StopNetwork">
            <summary>
            실행중인 모든 NetworkChannel을 중지합니다.
            </summary>
        </member>
        <member name="M:Aegis.Starter.StopNetwork(System.String)">
            <summary>
            지정된 NetworkChannel만 중지합니다.
            </summary>
            <param name="networkChannelName">중지할 NetworkChannel 이름</param>
            <returns>해당 NetworkChannel 객체</returns>
        </member>
        <member name="M:Aegis.Converter.DateTimeConverter.UnixTimeStamp(System.DateTime)">
            <summary>
            DateTime을 UnixTimeStamp 값으로 변환합니다.
            </summary>
            <returns>UnixTimeStamp</returns>
        </member>
        <member name="M:Aegis.Converter.DateTimeConverter.ToDateTime(System.Double)">
            <summary>
            UnixTimeStamp 값을 DateTime으로 변환합니다.
            </summary>
            <returns>UnixTimeStamp를 변환한 DateTime값</returns>
        </member>
        <member name="P:Aegis.Network.Session.SessionId">
            <summary>
            이 Session 객체의 고유번호입니다.
            </summary>
        </member>
        <member name="P:Aegis.Network.Session.Socket">
            <summary>
            이 Session에서 현재 사용중인 Socket 객체입니다. null일 경우, 네트워킹이 활성화되지 않은 상태입니다.
            </summary>
        </member>
        <member name="P:Aegis.Network.Session.Connected">
            <summary>
            원격지의 호스트와 통신이 가능한 상태인지 여부를 확인합니다.
            </summary>
        </member>
        <member name="M:Aegis.Network.Session.Connect(System.String,System.Int32)">
            <summary>
            서버에 연결을 요청합니다. 연결요청의 결과는 OnConnect를 통해 전달됩니다.
            현재 이 Session이 비활성 상태인 경우에만 수행됩니다.
            </summary>
            <param name="ipAddress">접속할 서버의 Ip Address</param>
            <param name="portNo">접속할 서버의 PortNo</param>
        </member>
        <member name="M:Aegis.Network.Session.Close">
            <summary>
            사용중인 리소스를 반환하고 소켓을 종료하여 네트워크 작업을 종료합니다.
            종료 처리가 진행되기 이전에 OnClose 함수가 호출됩니다.
            </summary>
        </member>
        <member name="M:Aegis.Network.Session.SendPacket(System.Byte[],System.Int32,System.Int32,System.Action{Aegis.StreamBuffer})">
            <summary>
            패킷을 전송합니다.
            </summary>
            <param name="buffer">보낼 데이터가 담긴 버퍼</param>
            <param name="offset">source에서 전송할 시작 위치</param>
            <param name="size">source에서 전송할 크기(Byte)</param>
            <param name="onSent">패킷 전송이 완료된 후 호출할 Action</param>
        </member>
        <member name="M:Aegis.Network.Session.SendPacket(Aegis.StreamBuffer,System.Action{Aegis.StreamBuffer})">
            <summary>
            패킷을 전송합니다.
            </summary>
            <param name="buffer">전송할 데이터가 담긴 StreamBuffer</param>
            <param name="onSent">패킷 전송이 완료된 후 호출할 Action</param>
        </member>
        <member name="M:Aegis.Network.Session.SendPacket(Aegis.StreamBuffer,Aegis.PacketCriterion,Aegis.EventHandler_Receive,System.Action{Aegis.StreamBuffer})">
            <summary>
            패킷을 전송하고, 특정 패킷이 수신될 경우 dispatcher에 지정된 핸들러를 실행합니다.
            이 기능은 AwaitableMethod보다는 빠르지만, 동시에 많이 호출될 경우 성능이 저하될 수 있습니다.
            </summary>
            <param name="buffer">전송할 데이터가 담긴 StreamBuffer</param>
            <param name="criterion">dispatcher에 지정된 핸들러를 호출할 것인지 여부를 판단하는 함수를 지정합니다.</param>
            <param name="dispatcher">실행될 함수를 지정합니다.</param>
            <param name="onSent">패킷 전송이 완료된 후 호출할 Action</param>
        </member>
        <member name="P:Aegis.Network.NetworkChannel.Name">
            <summary>
            이 NetworkChannel 객체의 고유한 이름입니다.
            </summary>
        </member>
        <member name="P:Aegis.Network.NetworkChannel.Acceptor">
            <summary>
            이 NetworkChannel에서 사용하는 Session 객체를 관리합니다.
            </summary>
        </member>
        <member name="M:Aegis.Network.NetworkChannel.CreateChannel(System.String)">
            <summary>
            NetworkChannel 객체를 생성합니다.
            name은 이전에 생성된 NetworkChannel과 동일한 문자열을 사용할 수 없습니다.
            </summary>
            <param name="name">생성할 NetworkChannel의 고유한 이름.</param>
            <returns>생성된 NetworkChannel 객체</returns>
        </member>
        <member name="M:Aegis.Network.NetworkChannel.Release">
            <summary>
            생성된 모든 NetworkChannel을 종료하고 사용중인 리소스를 반환합니다.
            활성화된 Acceptor, Session 등 모든 네트워크 작업이 종료됩니다.
            </summary>
        </member>
        <member name="M:Aegis.Network.NetworkChannel.FindChannel(System.String)">
            <summary>
            name을 사용하여 NetworkChannel을 가져옵니다.
            </summary>
            <param name="name">검색할 NetworkChannel의 이름</param>
            <returns>검색된 NetworkChannel 객체</returns>
        </member>
        <member name="M:Aegis.Network.NetworkChannel.StartNetwork(Aegis.SessionGenerateDelegator,System.Int32,System.Int32)">
            <summary>
            네트워크 작업을 시작합니다.
            </summary>
            <param name="generator">Session 객체를 생성하는 Delegator를 설정합니다. SessionManager에서는 내부적으로 Session Pool을 관리하는데, Pool에 객체가 부족할 때 이 Delegator가 호출됩니다. 그러므로 이 Delegator에서는 ObjectPool 대신 new를 사용해 인스턴스를 생성하는 것이 좋습니다.</param>
            <param name="initPoolCount">처음 생성할 Session의 개수를 지정합니다.</param>
            <param name="maxPoolCount">생성할 수 있는 Session의 최대개수를 지정합니다. 0이 입력되면 최대개수를 무시합니다.</param>
            <returns>현재 NetworkChannel 객체를 반환합니다.</returns>
        </member>
        <member name="M:Aegis.Network.NetworkChannel.StopNetwork">
            <summary>
            네트워크 작업을 종료하고 사용중인 리소스를 반환합니다.
            Acceptor와 활성화된 Session의 네트워크 작업이 중단됩니다.
            </summary>
        </member>
        <member name="M:Aegis.Network.NetworkChannel.OpenListener(System.String,System.Int32)">
            <summary>
            클라이언트의 연결요청을 받을 수 있도록 Listener를 오픈합니다.
            </summary>
            <param name="ipAddress">접속요청 받을 Ip Address</param>
            <param name="portNo">접속요청 받을 PortNo</param>
            <returns>현재 NetworkChannel 객체를 반환합니다.</returns>
        </member>
        <member name="M:Aegis.Network.NetworkChannel.CloseListener">
            <summary>
            Listener를 종료합니다.
            </summary>
        </member>
        <member name="T:Aegis.Network.Packet">
            <summary>
            Size(2 bytes), PacketId(2 bytes)로 구성된 4바이트 헤더를 갖는 기본 패킷 구성입니다.
            </summary>
        </member>
        <member name="P:Aegis.Network.Packet.Size">
            <summary>
            현재 패킷의 크기를 가져옵니다. 패킷의 크기값은 임의로 변경할 수 없습니다.
            </summary>
        </member>
        <member name="P:Aegis.Network.Packet.PacketId">
            <summary>
            패킷의 고유번호를 지정하거나 가져옵니다.
            </summary>
        </member>
        <member name="F:Aegis.Network.Packet.HeaderSize">
            <summary>
            패킷의 해더 크기(Byte)
            </summary>
        </member>
        <member name="M:Aegis.Network.Packet.#ctor(System.UInt16)">
            <summary>
            고유번호를 지정하여 패킷을 생성합니다.
            </summary>
            <param name="packetId">패킷의 고유번호</param>
        </member>
        <member name="M:Aegis.Network.Packet.#ctor(System.UInt16,System.UInt16)">
            <summary>
            고유번호와 패킷의 기본 크기를 지정하여 패킷을 생성합니다.
            </summary>
            <param name="packetId">패킷의 고유번호</param>
            <param name="capacity">패킷 버퍼의 크기</param>
        </member>
        <member name="M:Aegis.Network.Packet.#ctor(Aegis.StreamBuffer)">
            <summary>
            StreamBuffer의 데이터를 복사하여 패킷을 생성합니다.
            </summary>
            <param name="source">복사할 데이터가 담긴 StreamBuffer 객체</param>
        </member>
        <member name="M:Aegis.Network.Packet.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            byte 배열의 데이터를 복사하여 패킷을 생성합니다.
            </summary>
            <param name="source">복사할 데이터가 담긴 byte 배열</param>
            <param name="startIndex">source에서 복사할 시작 위치</param>
            <param name="size">복사할 크기(Byte)</param>
        </member>
        <member name="M:Aegis.Network.Packet.Clone">
            <summary>
            이 SecurePacket 객체와 동일한 내용의 새로운 객체를 생성합니다.
            </summary>
            <returns>현재 SecurePacket의 데이터가 복제된 객체</returns>
        </member>
        <member name="M:Aegis.Network.Packet.GetPacketId(System.Byte[])">
            <summary>
            지정된 버퍼에서 PacketId 값을 가져옵니다.
            buffer는 패킷 헤더가 온전히 포함된 데이터로 지정되어야 합니다.
            </summary>
            <param name="buffer">패킷 데이터가 담긴 버퍼</param>
            <returns>패킷의 PacketId를 반환합니다.</returns>
        </member>
        <member name="M:Aegis.Network.Packet.IsValidPacket(Aegis.StreamBuffer,System.Int32@)">
            <summary>
            수신된 데이터가 유효한 패킷인지 여부를 확인합니다.
            유효한 패킷으로 판단되면 packetSize에 이 패킷의 정확한 크기를 입력하고 true를 반환해야 합니다.
            </summary>
            <param name="buffer">수신된 데이터가 담긴 버퍼</param>
            <param name="packetSize">유효한 패킷의 크기</param>
            <returns>true를 반환하면 OnReceive를 통해 수신된 데이터가 전달됩니다.</returns>
        </member>
        <member name="M:Aegis.Network.Packet.Clear">
            <summary>
            패킷 버퍼를 초기화합니다. 기존의 PacketId 값은 유지됩니다.
            </summary>
        </member>
        <member name="M:Aegis.Network.Packet.Clear(Aegis.StreamBuffer)">
            <summary>
            패킷 버퍼를 초기화하고 source 데이터를 저장합니다. Packet Header의 Size는 source 버퍼의 헤더값이 사용됩니다.
            </summary>
            <param name="source">저장할 데이터</param>
        </member>
        <member name="M:Aegis.Network.Packet.Clear(System.Byte[],System.Int32,System.Int32)">
            <summary>
            패킷 버퍼를 초기화하고 source 데이터를 저장합니다. Packet Header의 Size는 source 버퍼의 헤더값이 사용됩니다.
            </summary>
            <param name="source">저장할 데이터</param>
            <param name="index">저장할 데이터의 시작위치</param>
            <param name="size">저장할 데이터 크기(Byte)</param>
        </member>
        <member name="M:Aegis.Network.Packet.OnWritten">
            <summary>
            패킷의 크기가 변경되었을 때 호출됩니다.
            이 함수가 호출되어야 패킷의 Size값이 변경됩니다.
            </summary>
        </member>
        <member name="M:Aegis.Network.Packet.SkipHeader">
            <summary>
            패킷의 헤더 위치를 건너띄어 본문 데이터를 읽을 수 있도록 읽기위치를 조절합니다.
            이 함수가 호출되면 ReadIndex는 4에 위치하지만, WriteIndex는 변하지 않습니다.
            </summary>
        </member>
        <member name="P:Aegis.Network.SecurePacket.Size">
            <summary>
            현재 패킷의 크기를 가져옵니다. 패킷의 크기값은 임의로 변경할 수 없습니다.
            </summary>
        </member>
        <member name="P:Aegis.Network.SecurePacket.PacketId">
            <summary>
            패킷의 고유번호를 지정하거나 가져옵니다.
            </summary>
        </member>
        <member name="P:Aegis.Network.SecurePacket.SeqNo">
            <summary>
            패킷의 Sequence number를 가져옵니다.
            </summary>
        </member>
        <member name="F:Aegis.Network.SecurePacket.HeaderSize">
            <summary>
            패킷의 해더 크기(Byte)
            </summary>
        </member>
        <member name="M:Aegis.Network.SecurePacket.#ctor(System.UInt16)">
            <summary>
            고유번호를 지정하여 패킷을 생성합니다.
            </summary>
            <param name="packetId">패킷의 고유번호</param>
        </member>
        <member name="M:Aegis.Network.SecurePacket.#ctor(System.UInt16,System.UInt16)">
            <summary>
            고유번호와 패킷의 기본 크기를 지정하여 패킷을 생성합니다.
            </summary>
            <param name="packetId">패킷의 고유번호</param>
            <param name="capacity">패킷 버퍼의 크기</param>
        </member>
        <member name="M:Aegis.Network.SecurePacket.#ctor(Aegis.StreamBuffer)">
            <summary>
            StreamBuffer의 데이터를 복사하여 패킷을 생성합니다.
            </summary>
            <param name="source">복사할 데이터가 담긴 StreamBuffer 객체</param>
        </member>
        <member name="M:Aegis.Network.SecurePacket.#ctor(System.Byte[],System.Int32,System.Int32)">
            <summary>
            byte 배열의 데이터를 복사하여 패킷을 생성합니다.
            </summary>
            <param name="source">복사할 데이터가 담긴 byte 배열</param>
            <param name="startIndex">source에서 복사할 시작 위치</param>
            <param name="size">복사할 크기(Byte)</param>
        </member>
        <member name="M:Aegis.Network.SecurePacket.Clone">
            <summary>
            이 SecurePacket 객체와 동일한 내용의 새로운 객체를 생성합니다.
            </summary>
            <returns>현재 SecurePacket의 데이터가 복제된 객체</returns>
        </member>
        <member name="M:Aegis.Network.SecurePacket.GetPacketId(System.Byte[])">
            <summary>
            지정된 버퍼에서 PacketId 값을 가져옵니다.
            buffer는 패킷 헤더가 온전히 포함된 데이터로 지정되어야 합니다.
            </summary>
            <param name="buffer">패킷 데이터가 담긴 버퍼</param>
            <returns>패킷의 PacketId를 반환합니다.</returns>
        </member>
        <member name="M:Aegis.Network.SecurePacket.IsValidPacket(Aegis.StreamBuffer,System.Int32@)">
            <summary>
            수신된 데이터가 유효한 패킷인지 여부를 확인합니다.
            유효한 패킷으로 판단되면 packetSize에 이 패킷의 정확한 크기를 입력하고 true를 반환해야 합니다.
            </summary>
            <param name="buffer">수신된 데이터가 담긴 버퍼</param>
            <param name="packetSize">유효한 패킷의 크기</param>
            <returns>true를 반환하면 OnReceive를 통해 수신된 데이터가 전달됩니다.</returns>
        </member>
        <member name="M:Aegis.Network.SecurePacket.Clear">
            <summary>
            패킷 버퍼를 초기화합니다. 기존의 PacketId 값은 유지됩니다.
            </summary>
        </member>
        <member name="M:Aegis.Network.SecurePacket.Clear(Aegis.StreamBuffer)">
            <summary>
            패킷 버퍼를 초기화하고 source 데이터를 저장합니다. Packet Header의 Size는 source 버퍼의 헤더값이 사용됩니다.
            </summary>
            <param name="source">저장할 데이터</param>
        </member>
        <member name="M:Aegis.Network.SecurePacket.Clear(System.Byte[],System.Int32,System.Int32)">
            <summary>
            패킷 버퍼를 초기화하고 source 데이터를 저장합니다. Packet Header의 Size는 source 버퍼의 헤더값이 사용됩니다.
            </summary>
            <param name="source">저장할 데이터</param>
            <param name="index">저장할 데이터의 시작위치</param>
            <param name="size">저장할 데이터 크기(Byte)</param>
        </member>
        <member name="M:Aegis.Network.SecurePacket.OnWritten">
            <summary>
            패킷의 크기가 변경되었을 때 호출됩니다.
            이 함수가 호출되어야 패킷의 Size값이 변경됩니다.
            </summary>
        </member>
        <member name="M:Aegis.Network.SecurePacket.SkipHeader">
            <summary>
            패킷의 헤더 위치를 건너띄어 본문 데이터를 읽을 수 있도록 읽기위치를 조절합니다.
            이 함수가 호출되면 ReadIndex는 4에 위치하지만, WriteIndex는 변하지 않습니다.
            </summary>
        </member>
        <member name="M:Aegis.Randomizer`1.Next">
            <summary>
            지정되지 않은 범위 내에서 임의 값을 반환합니다.
            </summary>
            <returns>임의 값</returns>
        </member>
        <member name="M:Aegis.Randomizer`1.Next(System.Int32,System.Int32)">
            <summary>
            min 값 이상 부터 max 값 미만 사이의 임의 값을 반환합니다.
            </summary>
            <param name="min">최소값</param>
            <param name="max">최대값</param>
            <returns>임의 값</returns>
        </member>
        <member name="M:Aegis.Randomizer`1.AddItem(System.Int32,`0)">
            <summary>
            NextItem 함수에서 확률적으로 가져올 수 있는 객체를 추가합니다.
            </summary>
            <param name="prob">확률값</param>
            <param name="item">추가할 객체</param>
        </member>
        <member name="M:Aegis.Randomizer`1.NextItem(System.Int32,System.Boolean)">
            <summary>
            저장된 Object 중 임의의 하나를 선택하여 반환합니다.
            fraction 값이 저장된 Object의 prob 합 보다 작거나 같으면 저장된 Object 중 하나를 반환합니다.
            fraction 값이 저장된 Object의 prob 합 보다 크면 저장된 Object 중 하나를 반환하거나 혹은 default을 반환합니다.
            </summary>
            <param name="fraction">확률값</param>
            <param name="eraseItem">true인 경우, 저장된 Object 중 하나를 반환할 때 해당 Object가 다음에 선택되지 않도록 목록에서 삭제합니다.</param>
            <returns>임의로 선택된 객체 혹은 선택되지 않았을 경우 null을 반환합니다.</returns>
        </member>
        <member name="M:Aegis.Randomizer`1.NextNumber">
            <summary>
            지정되지 않은 범위 내에서 임의 값을 반환합니다.
            </summary>
            <returns>임의 값</returns>
        </member>
        <member name="M:Aegis.Randomizer`1.NextNumber(System.Int32,System.Int32)">
            <summary>
            min 값 이상 부터 max 값 미만 사이의 임의 값을 반환합니다.
            </summary>
            <param name="min">최소값</param>
            <param name="max">최대값</param>
            <returns>임의 값</returns>
        </member>
        <member name="M:Aegis.Threading.SpinWorker.Work(System.Action)">
            <summary>
            actionWork 작업을 WorkerThread에서 실행합니다.
            </summary>
            <param name="actionWork">수행할 작업</param>
        </member>
        <member name="M:Aegis.Threading.SpinWorker.Work(System.Action,System.Action)">
            <summary>
            비동기 백그라운드 작업과 결과처리 작업으로 이루어진 기능을 실행합니다.
            actionWork는 WorkerThread에 의해 비동기로 실행되고, actionWork 작업이 끝나면
            actionDispatch가 DispatchThread에서 실행됩니다.
            actionWork에서 exception이 발생되면 actionDispatch 작업은 실행되지 않습니다.
            </summary>
            <param name="actionWork">비동기로 실행할 작업</param>
            <param name="actionDispatch">DispatchThread에서 실행할 작업</param>
        </member>
        <member name="M:Aegis.Threading.SpinWorker.Dispatch(System.Action)">
            <summary>
            actionDispatch 작업을 DispatchThread에서 실행합니다.
            </summary>
            <param name="actionDispatch">수행할 작업</param>
        </member>
        <member name="T:Aegis.Threading.AegisTask">
            <summary>
            이 클래스는 System.Threading.Tasks.Task의 각 메서드 기능과 완전히 동일합니다.
            다만, Task 내에서 발생되는 Exception을 핸들링하여 정보를 Logger로 보내는 기능이 추가되어있습니다.
            Task 내에서 TaskCanceledException이 발생할 경우에는 어떠한 동작도 하지 않습니다.
            </summary>
        </member>
        <member name="P:Aegis.Threading.AegisTask.TaskCount">
            <summary>
            현재 실행중인 Task의 갯수를 가져옵니다.
            </summary>
        </member>
        <member name="T:Aegis.EventHandler_Accept">
            <summary>
            클라이언트의 연결요청에 의해 Session이 활성화된 경우 호출됩니다.
            </summary>
            <param name="session">이벤트가 발생된 SessionBase 객체</param>
        </member>
        <member name="T:Aegis.EventHandler_Connect">
            <summary>
            이 Session 객체가 Connect를 사용하여 서버에 연결요청하면 결과가 전달됩니다.
            </summary>
            <param name="session">이벤트가 발생된 SessionBase 객체</param>
            <param name="connected">tru인 경우 연결에 성공</param>
        </member>
        <member name="T:Aegis.EventHandler_Close">
            <summary>
            원격지와의 연결이 종료되면 Session 객체를 초기화하기 전에 호출됩니다.
            </summary>
            <param name="session">이벤트가 발생된 SessionBase 객체</param>
        </member>
        <member name="T:Aegis.EventHandler_Receive">
            <summary>
            패킷 하나가 완전히 수신되면 이 함수가 호출됩니다.
            전달된 buffer 객체는 현재 Thread에서만 유효하므로, 비동기 작업시에는 새로운 StreamBuffer로 복사해야 합니다.
            </summary>
            <param name="session">이벤트가 발생된 SessionBase 객체</param>
            <param name="buffer">수신된 패킷이 담긴 StreamBuffer</param>
        </member>
        <member name="T:Aegis.EventHandler_IsValidPacket">
            <summary>
            수신된 데이터가 유효한 패킷인지 여부를 확인합니다.
            유효한 패킷으로 판단되면 packetSize에 이 패킷의 정확한 크기를 입력하고 true를 반환해야 합니다.
            </summary>
            <param name="buffer">수신된 데이터가 담긴 버퍼</param>
            <param name="packetSize">유효한 패킷의 크기</param>
            <returns>true를 반환할 경우 유효한 패킷으로 처리합니다.</returns>
        </member>
        <member name="T:Aegis.PacketCriterion">
            <summary>
            수신된 패킷이 지정된 Dispatch를 수행하기에 적합한지 여부를 확인합니다.
            적합할 경우 true를 반환해야 하며, 이 때에는 NetworkEvent_Received에 지정된 핸들러가 호출되지 않습니다.
            </summary>
            <param name="buffer">수신된 데이터가 담긴 버퍼</param>
            <returns>true를 반환할 경우 지정된 핸들러가 호출됩니다.</returns>
        </member>
        <member name="F:Aegis.NetworkMethodType.AsyncResult">
            <summary>
            Begin 계열의 Socket API를 사용하여 원격지의 호스트와 네트워킹을 할 수 있는 기능을 제공합니다.
            </summary>
        </member>
        <member name="F:Aegis.NetworkMethodType.AsyncEvent">
            <summary>
            Async 계열의 Socket API를 사용하여 원격지의 호스트와 네트워킹을 할 수 있는 기능을 제공합니다.
            </summary>
        </member>
        <member name="T:Aegis.MinMaxValue`1">
            <summary>
            값의 변경내역 가운데서 최대/최소값을 확인할 수 있습니다.
            </summary>
            <typeparam name="T">값의 형식</typeparam>
        </member>
        <member name="M:Aegis.Randomizer.Next">
            <summary>
            지정되지 않은 범위 내에서 임의 값을 반환합니다.
            </summary>
            <returns>임의 값</returns>
        </member>
        <member name="M:Aegis.Randomizer.Next(System.Int32,System.Int32)">
            <summary>
            min 값 이상 부터 max 값 미만 사이의 임의 값을 반환합니다.
            </summary>
            <param name="min">최소값</param>
            <param name="max">최대값</param>
            <returns>임의 값</returns>
        </member>
        <member name="M:Aegis.Randomizer.NextNumber">
            <summary>
            지정되지 않은 범위 내에서 임의 값을 반환합니다.
            </summary>
            <returns>임의 값</returns>
        </member>
        <member name="M:Aegis.Randomizer.NextNumber(System.Int32,System.Int32)">
            <summary>
            min 값 이상 부터 max 값 미만 사이의 임의 값을 반환합니다.
            </summary>
            <param name="min">최소값</param>
            <param name="max">최대값</param>
            <returns>임의 값</returns>
        </member>
        <member name="T:Aegis.BlockingQueue`1">
            <summary>
            Queue에서 요소를 가져올 때 Queue가 비어있다면 새로운 요소가 삽입될 때 까지 대기합니다.
            </summary>
            <typeparam name="T">Queue의 요소 형식을 지정합니다.</typeparam>
        </member>
        <member name="M:Aegis.BlockingQueue`1.Enqueue(`0)">
            <summary>
            Queue에 객체 하나를 추가하고 대기중인(Pop을 호출한) 쓰레드 하나가 깨어납니다.
            </summary>
            <param name="item">추가할 객체</param>
        </member>
        <member name="M:Aegis.BlockingQueue`1.Dequeue">
            <summary>
            Queue에서 객체 하나를 가져옵니다. 만약 Queue가 비어있는 상태라면 객체가 추가될 때 까지 대기합니다.
            반환되는 객체는 Queue에서 제거됩니다.
            </summary>
            <returns>Queue의 첫 번째에 위치한 객체</returns>
        </member>
        <member name="M:Aegis.BlockingQueue`1.DequeueOrDefault">
            <summary>
            Queue에서 객체 하나를 가져옵니다. 만약 Queue가 비어있는 상태라면 default(T)를 반환합니다.
            반환되는 객체는 Queue에서 제거됩니다.
            </summary>
            <returns>Queue의 첫 번째에 위치한 객체 혹은 default 값</returns>
        </member>
        <member name="M:Aegis.BlockingQueue`1.Cancel">
            <summary>
            Dequeue에 대기중인 쓰레드에서 JobCanceledException이 발생합니다.
            Clear를 호출해 초기화하기 전 까지는 Pop을 사용할 수 없습니다.
            </summary>
        </member>
        <member name="T:Aegis.StreamBuffer">
            <summary>
            데이터를 순차적으로 읽거나 쓸 수 있는 버퍼입니다.
            데이터 쓰기의 경우, 버퍼가 부족하면 자동으로 증가시킵니다.
            데이터 읽기의 경우, 쓰기된 크기 이상으로 읽어들일 수 없습니다.
            </summary>
        </member>
    </members>
</doc>
